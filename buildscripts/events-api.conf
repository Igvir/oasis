http = {
  port = 8050
  ssl = false
}

oasis = {

  adminApi = {
    baseUrl: "http://stats-api:8010/api"

    eventSourceGet: "/admin/event-source"
    playerGet: "/players"

    # authentication details of admin api
    apiKey: "eventapi"
    secretKey: "eventapi"
  }

  dispatcher = {
    impl = "oasis:io.github.oasis.ext.kafkastream.KafkaStreamFactory"
    configs = {
      brokerUrls: "kafka:9092"

      maxConsumerThreadPoolSize: 4

      gameEventsConsumer = {
        # groupId = ""

        # If not specified, this will take engine id
        # instanceId = ""

        # These props will directly feed to Kafka property configs
        # Check kafka consumer documentation for supported props.
        props = {
            #"max.poll.records": 10,
            #"session.timeout.ms": 86400000
        }
      }

      broadcastConsumer = {
        # groupId = ""

        # These props will directly feed to Kafka property configs
        # Check kafka consumer documentation for supported props.
        props = {
        }
      }

      dispatcherConfigs = {
        props = {}
      }

      engineEventConsumer = {
        props = {}
      }

    }
  }

  cache = {
    impl = "oasis:io.github.oasis.services.events.db.RedisVerticle"
    configs = {
        connectionString: "redis://apicache:6381"
        maxPoolSize: 4
        maxWaitingHandlers: 16
    }
  }
}